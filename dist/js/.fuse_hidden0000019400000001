var id = 0;
var objson = {};
var first = true;
var endFunction = false;

var treeFather = new Tree();
treeFather.id = 0;

$(function() {
    $(".card").draggable({
        appendTo: "body",
        cursor: "move",
        helper: "clone",
        revert: "invalid",
        drag: function(event,ui){
            //$("body").toggleClass("test");
            //$('.spa').toggleClass("ui-element");
        }
    });
});

$(function() {
    $("#droppable-out").droppable(funcDroppableOut);
    $('.drop').droppable(funcDroppableDrop);
});

var funcDroppableOut = {
    tolerance: "intersect",
    accept: ".card2",
    drop: function( event, ui ) {
        var elementDrop = $(ui.draggable);

        if(elementDrop.hasClass("first")){
            $(".drop").droppable(funcDroppableDrop);
            treeFather = new Tree();
            treeFather.id = 0;
            objson = {};
            first = true;
            id = 0;
            
            UpdateMath("<math>" + "" + "</math>");
        }
        else{
            var idFather = elementDrop.parent().data("father");
            var position = elementDrop.parent().data("pos");
            var elementFather = $('div').find('[data-id='+ idFather+']');
            console.log(elementFather);
            
            var elementSpa = elementFather.find('.spa');
            elementSpa.addClass('drop2');
            elementSpa.droppable(funcDroppable); 

            treeFather.removeNode(idFather, position);
            
            var jsn = treeFather.makeString();
            UpdateMath("<math>" + jsn + "</math>");
        }

        elementDrop.remove();            
    }
}

var funcDroppableDrop = {
    tolerance: "intersect",
    accept: ".card",
    activeClass: "ui-state-default",
    hoverClass: "drop-p",
    drop: function( event, ui ) {
        var elementDrop = $(ui.draggable).clone()
        makeTree(elementDrop, $(this));
        
        $(this).append(elementDrop);
        var jsn = treeFather.makeString();
        UpdateMath("<math>" + jsn + "</math>");

        console.log('mathml:');
        console.log(jsn);
        console.log('tree:');
        console.log(treeFather);
        if(first){
            first = false;
            elementDrop.addClass("first");
        }
    }
}

var funcDroppable = {
    tolerance: "touch",
    accept: ".card",
    activeClass: "drop-3",
    hoverClass: function(){
        if($(this).children().length < 1) {
            return "drop-2";
        }else
            return "";
    },
   drop: function (event, ui) {
        var elementDrop = $(ui.draggable).clone();
        makeTree(elementDrop, $(this));
       
       $(this).append(elementDrop);
        var jsn = treeFather.makeString();
        UpdateMath("<math>" + jsn + "</math>");
        
       console.log('mathml:');
       console.log(jsn);
       console.log('tree:');
       console.log(treeFather);
    }
};

var funcDroppableFalse = {
    tolerance: "touch",
    accept: ".naskiajs",
    activeClass: "aaa3",
    drop: function (event, ui) {}
};

function makeTree(elementDrop, uu){
    uu.droppable(funcDroppableFalse); //cambia la apariencia.
    var idData = elementDrop.data("id"),
        idElement = ++id,
        tree = new Tree(),
        position,
        idFather;
    
    if(uu.data('id')){
        idFather = uu.data('father');
        position = uu.data('pos');
    }else{
        position = 0;
        idFather = 0;
    }
    
    elementDrop.addClass("card2");
    elementDrop.removeClass("card");
    elementDrop.draggable({
        appendTo: "body",
        cursor: "move",
        revert: "invalid",
        greedy: true
    });
    elementDrop.attr('data-id', idElement);
    tree.id = idElement;
    
    if(idData == "var"){
        //poner metadatos;
        tree.tag = '<mn>' + elementDrop.data("content") + '</mn>';
    }
    else if(idData == "cons"){
        //poner metadatos;
        tree.tag = '<mn>' + elementDrop.data("content") + '</mn>';
    }
    else if(idData == "llaves" || idData == "parentesis" || idData == "corchetes" || idData == "factorial"){
        var child = elementDrop.find('code:nth-child(1)');
        child.attr('data-id', ++id);
        child.attr('data-pos', 0);
        child.attr('data-father', idElement);
        
        if (idData == 'llaves'){
            tree.opentag = '<mrow><mtext>{</mtext>';
            tree.closetag = '<mtext>}</mtext></mrow>';
        }
        else if (idData == 'parentesis'){
            tree.opentag = '<mrow><mtext>(</mtext>';
            tree.closetag = '<mtext>)</mtext></mrow>';
        }
        else if(idData == 'corchetes'){
            tree.opentag = '<mrow><mtext>[</mtext>';
            tree.closetag = '<mtext>]</mtext></mrow>';
        }
        else{
            tree.opentag = '<mrow><mtext>(</mtext>';
            tree.tag = '';
            tree.closetag = '<mtext>)!</mtext></mrow>';
        }
        tree.setChildren(['<mi>□</mi>']);        
    }
    else if(idData == "trig"){
        var child = elementDrop.find('code:nth-child(1)');
        child.attr('data-id', ++id);
        child.attr('data-pos', 0);
        child.attr('data-father', idElement);

        tree.opentag = '<mrow><mi>' + elementDrop.data('content') + '</mi><mtext>(</mtext>';
        tree.closetag = '<mtext>)</mtext></mrow>';
        tree.setChildren(['<mi>□</mi>']);
    }
    else if(idData == "raiz"){
        var child = elementDrop.find('code:nth-child(1)');
        child.attr('data-id', ++id);
        child.attr('data-pos', 0);
        child.attr('data-father', idElement);

        tree.opentag = '<mrow><msqrt><mtext>(</mtext>';
        tree.closetag = '</msqrt><mtext>)</mtext></mrow>';
        tree.setChildren(['<mi>□</mi>']);
    }
    else if(idData == "raiz-n"){
        var child1 = elementDrop.find("code:nth-child(1)");
        child1.attr('data-id', ++id);
        child1.attr('data-pos', 1);
        child1.attr('data-father', idElement);
        
        var child2 = elementDrop.find("code:nth-child(3)");
        child2.attr('data-id', ++id);
        child2.attr('data-pos', 0);
        child2.attr('data-father', idElement);
        
        tree.opentag = '<mrow><mroot>';
        tree.closetag = '</mroot></mrow>';
        tree.setChildren(['<mrow><mi>□</mi></mrow>', '<mrow><mi>□</mi></mrow>']);
    }
    else if(idData == "expo" || idData == "expo-base"){
        var child1 = elementDrop.find("code:nth-child(1)");
        child1.attr('data-id', ++id);
        child1.attr('data-pos', 0);
        child1.attr('data-father', idElement);
        
        var child2 = elementDrop.find("code:nth-child(2)");
        child2.attr('data-id', ++id);
        child2.attr('data-pos', 1);
        child2.attr('data-father', idElement);
        
        if(idData == 'expo'){
            tree.opentag = '<mrow><msup>';
            tree.closetag = '</msup></mrow>';    
        }else{
            tree.opentag = '<mrow><msub>';
            tree.closetag = '</msub></mrow>';  
        }
        tree.setChildren(['<mrow><mi>□</mi></mrow>', '<mrow><mi>□</mi></mrow>']);
    }
    else if(idData == "log"){
        var child1 = elementDrop.find("code:nth-child(1)");
        child1.attr("data-id", ++id);
        child1.attr("data-pos", 0);
        child1.attr('data-father', idElement);
        
        var child2 = elementDrop.find("code:nth-child(2)");
        child2.attr("data-id", ++id);
        child2.attr("data-pos", 1);
        child2.attr('data-father', idElement);

        tree.opentag = '<mrow><mi>' + elementDrop.data('content') + '</mi><msub>';
        tree.closetag = '</msub></mrow>';
        tree.setChildren(['<mrow><mi>□</mi></mrow>', '<mrow><mi>□</mi></mrow>']);
    }
    else if(idData == "suma" || idData == "resta" || idData == "mult" || idData == "igual"){
        var child1 = elementDrop.find("code:nth-child(1)");
        child1.attr("data-id", ++id);
        child1.attr("data-pos", 0);
        child1.attr('data-father', idElement);
        
        var child2 = elementDrop.find("code:nth-child(2)");
        child2.attr("data-id", ++id);
        child2.attr("data-pos", 2);
        child2.attr('data-father', idElement);

        tree.opentag = '<mrow><mtext>(</mtext>';
        tree.closetag = '<mtext>)</mtext></mrow>';
        tree.setChildren(['<mrow><mi>□</mi></mrow>', '<mo>' + elementDrop.data('content') + '</mo>', '<mrow><mi>□</mi></mrow>']);
    }
    else if(idData == "funcionf"){
        var child1 = elementDrop.find("code:nth-child(1)");
        child1.attr("data-id", ++id);
        child1.attr("data-pos", 0);
        child1.attr('data-father', idElement);
        
        var child2 = elementDrop.find("code:nth-child(2)");
        child2.attr("data-id", ++id);
        child2.attr("data-pos", 2);
        child2.attr('data-father', idElement);

        tree.opentag = '<mrow><mtext>f(</mtext>';
        tree.closetag = '</mrow>';
        tree.setChildren(['<mrow><mi>□</mi></mrow>', '<mo>)=</mo>', '<mrow><mi>□</mi></mrow>']);
    }
    else if(idData == "combinatoria"){
        var child1 = elementDrop.find("div:nth-child(2)").find("div:nth-child(1)");
        child1.attr("data-id", ++id);
        child1.attr("data-pos", 0);
        child1.attr('data-father', idElement);

        var child2 = elementDrop.find("div:nth-child(2)").find("div:nth-child(2)");
        child2.attr("data-id", ++id);
        child2.attr("data-pos", 1);
        child2.attr('data-father', idElement);

        tree.opentag = "<mrow><mtext>(</mtext><mfrac linethickness='0em'>";
        tree.closetag = '</mfrac><mtext>)</mtext></mrow>';
        tree.setChildren(['<mrow><mi>□</mi></mrow>', '<mrow><mi>□</mi></mrow>']);
    }
    else if(idData == "division"){
        var child1 = elementDrop.find("div:nth-child(2)").find("div:nth-child(1)");
        child1.attr("data-id", ++id);
        child1.attr("data-pos", 0);
        child1.attr('data-father', idElement);

        var child2 = elementDrop.find("div:nth-child(2)").find("div:nth-child(3)");
        child2.attr("data-id", ++id);
        child2.attr("data-pos", 1);
        child2.attr('data-father', idElement);

        tree.opentag = "<mrow><mtext>(</mtext><mfrac linethickness='1px'>";
        tree.closetag = '</mfrac><mtext>)</mtext></mrow>';
        tree.setChildren(['<mrow><mi>□</mi></mrow>', '<mrow><mi>□</mi></mrow>']);
    }
    else if(idData == "sumatoria" || idData == "integral" || idData == "multiplicatoria"){
        var child1 = elementDrop.find("div:nth-child(3)").find("div:nth-child(2)");
        child1.attr("data-id", ++id);
        child1.attr("data-pos", 0);
        child1.attr('data-father', idElement);

        var child2 = elementDrop.find("div:nth-child(3)").find("div:nth-child(1)");
        child2.attr("data-id", ++id);
        child2.attr("data-pos", 1);
        child2.attr('data-father', idElement);

        var child3 = elementDrop.find("code");
        child3.attr("data-id", ++id);
        child3.attr("data-pos", 3);
        child3.attr('data-father', idElement);

        var simbolo;
        if(idData == "sumatoria")
            simbolo = '<mo>&#x2211;</mo>';
        else if(idData == "integral")
            simbolo = '<mo>&#x222B;</mo>';
        else if(idData == "multiplicatoria")
            simbolo = '<mo>&#x220F;</mo>';

        tree.opentag = "<mrow><munderover>" + simbolo;
        tree.closetag = '</mrow>';
        tree.setChildren(['<mrow><mi>□</mi></mrow>', '<mrow><mi>□</mi></mrow>', '</munderover>', '<mrow><mi>□</mi></mrow>']);
    }
    else if(idData == "func-2" || idData == "func-3" || idData == "func-4" || idData == "func-5"){
        var num = idData.substring(idData.lastIndexOf('-') + 1);
        var vec = [];

        for(var i = 0; i < num; i++){
            var text = "code:nth-child("+(i+1)+")";
            var child = elementDrop.find(text);
            
            child.attr("data-id", ++id);
            child.attr("data-pos", 0);
            child.attr('data-father', idElement);

            vec[i] = '<mrow><mi>□</mi></mrow>';
        }

        tree.opentag = '<mrow><mtext>(</mtext>';
        tree.closetag = '<mtext>)</mtext></mrow>';
        tree.setChildren(vec);
    }

    
    treeFather.addNode(idFather, tree, position);
    
    var elementSpa = elementDrop.find('.spa');
    elementSpa.addClass('drop2');
    elementSpa.droppable(funcDroppable);    
}

(function () {
    var QUEUE = MathJax.Hub.queue;
    var math = null;
    QUEUE.Push(function () {
        math = MathJax.Hub.getAllJax("previsualizar")[0];
    });
    window.UpdateMath = function (MathML) {
        QUEUE.Push(["Text", math, MathML]);
    }
})();

function Tree(){
    this.id = '';
    this.tag = '';
    this.opentag = '';
    this.closetag = '';
    this.children = [];
    this.meta = [];
    
};

Tree.prototype.init = function(id, tag, opentag, closetag, children){
    this.id = id;
    this.tag = tag;
    this.opentag = opentag;
    this.closetag = closetag;
    this.children = children;
}
    
Tree.prototype.setChildren = function(child){
    this.children = child;
}

Tree.prototype.setChildrenPos = function(pos, children){
    console.log('children');
    console.log(children);
    this.children.splice(pos, 1, children);
}

Tree.prototype.makeString = function(){
    var r = makeStringRec(this);
    return r;
}

function makeStringRec(tree){
    var result = '';
    if(tree instanceof Tree){
        if(tree.opentag)
            result = tree.opentag;
        if(tree.tag)
            result = result + tree.tag;

        if(tree.children)
            if(tree.children.length > 0){
                for(var index in tree.children){
                    var node = tree.children[index];
                    result = result + makeStringRec(node);
                }
            }
        if(tree.closetag)
            result = result + tree.closetag;
    }
    else{
        for(var index in tree){
            result = result + tree[index];    
        }
        
    }
        
    
    return result;
}

Tree.prototype.addNode = function(idFather, data, pos){
    endFunction = false;
    if(treeFather.children.length == 0){
        treeFather.children = [data];
    }else{
        addNodeRec(this, idFather, function(node, err){
            if(err)
                console.log(err);
            else{
                node.setChildrenPos(pos, data);
            }
        });
    }
}

function addNodeRec(tree, idFather, callback){
    if(tree.id === idFather){
        endFunction = true;
        callback(tree);
    }
    else{
        if(!endFunction)
            if(tree.children)
                if(tree.children.length > 0){
                    for(var index in tree.children){
                        var node = tree.children[index];
                        addNodeRec(node, idFather, callback);
                    }
                }
                else
                    callback(null, 'no se encontro el id')
            else
                callback(null, 'no se encontraron hijos')
    }
}

Tree.prototype.removeNode = function(idFather, pos){
    endFunction = false;
    removeNodeRec(this, idFather, function(resp, err){
        if(err)
            console.log(err);
        else{
            resp.children[pos] = '<mi>□</mi>'
        }
            
    });
}

function removeNodeRec(tree, idFather, callback){
    if(tree instanceof Tree){
        if(tree.id == idFather){
            endFunction = true;
            callback(tree);
        }
        else{
            if(!endFunction)
                if(tree.children)
                    if(tree.children.length > 0){
                        for(var index in tree.children){
                        var node = tree.children[index];
                        addNodeRec(node, idFather, callback);
                    }
                    }
                    else{
                        callback(null, 'no se encontro el id')
                    }
                else
                    callback(null, 'no se encontraron hijos');
        }
    }
}


$(document).ready(function(){
    console.log("sisas");
    
    
    
    $('#rootwizard').bootstrapWizard();
    $("#valor").rating();
    $("#valorA").rating();
    
    function limpiar(){
        $("#formEspecifica").fadeOut("fast");
        $("#formUniforme").fadeOut("fast");
        $("#formCategorica").fadeOut("fast");
    }
    $("#varEspecifica").click(function(){
        limpiar();
        console.log("var especifca");
        $("#formEspecifica").fadeIn();
    });
    $("#varUniforme").click(function(){
        limpiar();
        console.log("var uniforme");
        $("#formUniforme").fadeIn();
    });
    $("#varCategorica").click(function(){
        limpiar();
        console.log("var categorica");
        $("#formCategorica").fadeIn();
    });
    
    
        $('form.form-ag').on('submit', function(e){
        e.preventDefault();
        console.log("OOE JJ");
        $(".view-variable")
        .addClass('card')
        .draggable({
            appendTo: "body",
            cursor: "move", //como se ve el cursor cuando lo muevo
            helper: 'clone', //que pasa cuando lo muevo, se clona
            revert: "invalid" //no se puede devolver

        });
        
});

});


/*$('.card').on('draggable', function(){
    console.log('OE');
});*/

/*function doDrag(){
    $(".card").click(function(){
        console.log("ACA");
    });
    
    $(".card").draggable({
        appendTo: "body",
        cursor: "move",
        helper: "clone",
        revert: "invalid",
        drag: function(event,ui){
            //$("body").toggleClass("test");
            //$('.spa').toggleClass("ui-element");
        }
    });
}*/
              
// $(".card").draggable({
//     appendTo: "body",
//     cursor: "move",//como se ve el cursor cuando lo muevo
//     helper: 'clone',//que pasa cuando lo muevo, se clona
//     revert: "invalid"//no se puede devolver
// });


// //Elemento que contiene inicialmente los .card
// $("#launchPad").droppable({
//     tolerance: "intersect",//agarra desde que el elemento se intercepte
//     accept: ".card", //acepta eestos elementos (los .class)
//     activeClass: "ui-state-default",//clase cuando esta activo
//     hoverClass: "ui-state-hover",//clase cuando se lo pongo encima
//     drop: function(event, ui) {
//         $("#launchPad").append($(ui.draggable));//evento para agregar, donde ui es elemento que agrege encima de launcpad
//     }
// });



// });


// var first = true;
// var id = 0;
// var mathml = "";
// var objson = {};
// var ids = {};
// var banderanCombiG=false;
// var banderafactorial=false;
// var banderafuncionf=false;


// $(function() {
//     $(".card").draggable({
//         appendTo: "body",
//         cursor: "move",
//         helper: "clone",
//         revert: "invalid",
//         drag: function(event,ui){
//             //$("body").toggleClass("test");
//             //$('.spa').toggleClass("ui-element");
//         }
//     });

// });

// $(function() {
//     $("#droppable-out").droppable({
//         tolerance: "intersect",
//         accept: ".card2",
//         drop: function( event, ui ) {
//             var elementDrop = $(ui.draggable);

//             var father = elementDrop.parent().data("id");
            
//             if (elementDrop.data("id") == "var" || elementDrop.data("id") == "cons") {
//                 var stringvar = "";
//                 addvar(father, objson, stringvar);            
//             } else {
//                 var nodo = removeNode(father, objson, []);
                
//             }
//             mathml = "";
//             stringmathml(objson);
//             UpdateMath("<math>" + mathml + "</math>");
            
            
//             elementDrop.remove();
//             if(elementDrop.hasClass("first")){
//                 $(".drop").droppable("enable");
//                 first = true;
//                 UpdateMath("<math>" + "" + "</math>");
//             }
//         }
//     });

// });

// $(function() {
    
//     $(".drop").droppable({
//         tolerance: "intersect",
//         accept: ".card",
//         activeClass: "ui-state-default",
//         hoverClass: "drop-p",
//         drop: function( event, ui ) {
//             var elementDrop = $(ui.draggable).clone();
//             var idData = elementDrop.data("id");
            
//             elementDrop.addClass("card2");
//             elementDrop.removeClass("card");
            
//             elementDrop.draggable({
//                 appendTo: "body",
//                 cursor: "move",
//                 revert: "invalid",
//                 greedy: true
//             });
            
//             if(idData == "var"){
//                 //elementDrop.css("padding", "0 6px");
//                 elementDrop.css("border", "0px");
//             }
//             else if(idData == "cons"){
                
//             }
//             else if(idData == "llaves" || idData == "parentesis" || idData == "corchetes" || idData == "factorial"){
//                 elementDrop.attr('data-id', ++id);
//                 elementDrop.find("code:nth-child(1)").attr('data-id', ++id);
                
//                 objson["id"] = idData;        
//                 objson["children"] = [];
                
//                 if (idData == "llaves") 
//                     objson["etiqueta"] = "<mtext>{</mtext>";
//                 else if (idData == "parentesis" ) 
//                     objson["etiqueta"] = "<mtext>(</mtext>";
//                 else if(idData == "factorial"){
//                     objson["etiqueta"] = "<mtext>(</mtext>";
//                     banderafactorial = true;
//                 }
//                 else 
//                     objson["etiqueta"] = "<mtext>[</mtext>";
                
                
//                 //Funcion para general el JSON
//                 makeJsonGroup(elementDrop);
                
//                 var elementSpa = elementDrop.find(".spa");
//                 elementSpa.addClass("drop2");
//                 elementSpa.droppable(funcDroppable);
                
//             }
//             else if(idData == "sumatoria" || idData == "integral" || idData == "multiplicatoria"){
//                 objson["id"] = ++id;
//                 objson["etiqueta"] = "";
//                 objson["children"] = [];
                
//                 elementDrop.attr('data-id', ++id);
//                 elementDrop.find("div:nth-child(2)").find("div:nth-child(1)").attr('data-id', ++id);
//                 elementDrop.find("div:nth-child(2)").find("div:nth-child(2)").attr('data-id', ++id);
//                 elementDrop.find("code").attr('data-id', ++id);
                
//                 //Funcion para general el JSON
//                 makeJsonSummation(elementDrop,false);
                
//                 var elementSpa = elementDrop.find(".spa");
//                 elementSpa.addClass("drop2");
//                 elementSpa.droppable(funcDroppable);
                
            
//             }else if(idData == "trig") {
//                 objson["id"] = ++id;
//                 objson["etiqueta"] = "";
//                 objson["children"] = [];
//                 elementDrop.css("padding", "0");
//                 elementDrop.css("border", "0px");

//                 elementDrop.attr('data-id', $(this).data("id"));
//                 elementDrop.find("code:nth-child(1)").attr('data-id', ++id);
//                 //Funcion para general el JSON
//                 makeJsonOneParameter(idData, elementDrop, false);

//                 var elementSpa = elementDrop.find(".spa");
//                 elementSpa.addClass("drop2");
//                 elementSpa.droppable(funcDroppable);

//             }
//             else if(idData == "raiz") {
//                 objson["id"] = ++id;
//                 objson["etiqueta"] = "";
//                 objson["children"] = [];
//                 elementDrop.css("padding", "0");
//                 elementDrop.css("border", "0px");

//                 elementDrop.attr('data-id', $(this).data("id"));
//                 elementDrop.find("code:nth-child(1)").attr('data-id', ++id);
//                 //Funcion para general el JSON
//                 makeJsonRaiz(idData, elementDrop, false);

//                 var elementSpa = elementDrop.find(".spa");
//                 elementSpa.addClass("drop2");
//                 elementSpa.droppable(funcDroppable);

//             }
//             else if(idData == "raiz-n") {
//                 objson["id"] = ++id;
//                 objson["etiqueta"] = "";
//                 objson["children"] = [];
//                 elementDrop.css("padding", "0");
//                 elementDrop.css("border", "0px");

//                 elementDrop.attr('data-id', $(this).data("id"));
//                 elementDrop.find("code:nth-child(1)").attr('data-id', ++id);
//                 elementDrop.find("code:nth-child(3)").attr('data-id', ++id);

//                 //Funcion para general el JSON
//                 makeJsonNRaiz(idData, elementDrop, false);

//                 var elementSpa = elementDrop.find(".spa");
//                 elementSpa.addClass("drop2");
//                 elementSpa.droppable(funcDroppable);

//             }
//             else if(idData == "expo" || idData == "expo-base") {
//                 objson["id"] = ++id;
//                 objson["etiqueta"] = "";
//                 objson["children"] = [];
                
//                 elementDrop.data("data-id", $(this).data("id"));
//                 elementDrop.find("code:nth-child(1)").attr("data-id", ++id);
//                 elementDrop.find("code:nth-child(2)").attr("data-id", ++id);
                
//                 makeJsonExpo(idData, elementDrop, false);
                
//                 var elementSpa = elementDrop.find(".spa");
//                 elementSpa.addClass("drop2");
//                 elementSpa.droppable(funcDroppable);
//             }
//             else if(idData == "log") {
//                 objson["id"] = ++id;
//                 objson["etiqueta"] = "";
//                 objson["children"] = [];
                
//                 elementDrop.css("padding", "0");
//                 elementDrop.css("border", "0px");

//                 elementDrop.data("data-id", $(this).data("id"));
//                 elementDrop.find("code:nth-child(1)").attr("data-id", ++id);
//                 elementDrop.find("code:nth-child(2)").attr("data-id", ++id);
//                 //Funcion para general el JSON
//                 makeJsonLog(idData, elementDrop, false);

//                 var elementSpa = elementDrop.find(".spa");
//                 elementSpa.addClass("drop2");
//                 elementSpa.droppable(funcDroppable);

//             }
//             else if(idData == "combinatoria") {
//                 objson["id"] = ++id;
//                 objson["etiqueta"] = "";
//                 objson["children"] = [];
                
//                 elementDrop.css("padding", "0");
//                 elementDrop.css("border", "0px");

                
//                 elementDrop.attr('data-id', ++id);
//                 elementDrop.find("div:nth-child(2)").find("div:nth-child(1)").attr('data-id', ++id);
//                 elementDrop.find("div:nth-child(2)").find("div:nth-child(2)").attr('data-id', ++id);

                
//                 //Funcion para general el JSON
//                 makeJsonCombi(idData, elementDrop, false);

//                 var elementSpa = elementDrop.find(".spa");
//                 elementSpa.addClass("drop2");
//                 elementSpa.droppable(funcDroppable);

//             }
            
//             else if(idData == "funcionf") {
//                 banderafuncionf = true;
//                 objson["id"] = ++id;
//                 objson["etiqueta"] = "";
//                 objson["children"] = [];
                
//                 elementDrop.css("padding", "0");
//                 elementDrop.css("border", "0px");

                
//                 elementDrop.attr('data-id', ++id);
//                 elementDrop.find("code:nth-child(1)").attr("data-id", ++id);
//                 elementDrop.find("code:nth-child(2)").attr("data-id", ++id);

                
//                 //Funcion para general el JSON
//                 makeJsonFuncionf(idData, elementDrop, false);

//                 var elementSpa = elementDrop.find(".spa");
//                 elementSpa.addClass("drop2");
//                 elementSpa.droppable(funcDroppable);

//             }
            
//             else if(idData == "division") {
//                 objson["id"] = ++id;
//                 objson["etiqueta"] = "";
//                 objson["children"] = [];
                
//                 elementDrop.css("padding", "0");
//                 elementDrop.css("border", "0px");

                
//                 elementDrop.attr('data-id', ++id);
//                 elementDrop.find("div:nth-child(2)").find("div:nth-child(1)").attr('data-id', ++id);
//                 elementDrop.find("div:nth-child(2)").find("div:nth-child(2)").attr('data-id', ++id);

                
//                 //Funcion para general el JSON
//                 makeJsonDivsion(idData, elementDrop, false);

//                 var elementSpa = elementDrop.find(".spa");
//                 elementSpa.addClass("drop2");
//                 elementSpa.droppable(funcDroppable);

//             }
            
            
//             else{
//                 elementDrop.data("data-id", ++id);
//                 elementDrop.find("code:nth-child(1)").attr("data-id", ++id);
//                 elementDrop.find("code:nth-child(2)").attr("data-id", ++id);
                
                
//                 objson["id"] = idData;
//                 objson["etiqueta"] = "";
//                 objson["children"] = [];
                
//                 //Funcion para general el JSON
//                 makeJsonOther(idData, elementDrop, false);                
                
//                 var elementSpa = elementDrop.find(".spa");
//                 elementSpa.addClass("drop2");
//                 elementSpa.droppable(funcDroppable);
                
//             }
            

//                 if($(this).children().length < 1){
//                     $(this).append(elementDrop);
//                     $(this).css("padding","0px 0px 0px 6px");
//                 }
//             mathml = "";
//             stringmathml(objson);
//             UpdateMath("<math>" + mathml + "</math>");

//             console.log(JSON.stringify(objson));
//             console.log(mathml);
//             if(first){
//                 $(this).droppable("disable");
//                 first = false;
//                 elementDrop.addClass("first");
//             }
//         }
//     });
// });

// var funcDroppable = {
//     tolerance: "touch",
//     accept: ".card",
//     activeClass: "drop-3",
//     hoverClass: function(){
//         if($(this).children().length < 1) {
//             return "drop-2";
//         }else
//             return "";

//     },

//    drop: function (event, ui) {
//         var elementDrop = $(ui.draggable).clone();

//         var idData = elementDrop.data("id");
        
//         elementDrop.addClass("card2");
//         elementDrop.removeClass("card");

//         elementDrop.draggable({
//                 appendTo: "body",
//                 cursor: "move",
//                 revert: "invalid",
//                 greedy: true
//             });
        
//         if($(this).children().length < 1){
//             $(this).append(elementDrop);

//             //$(this).css("padding","0px 0px 0px 6px");
           
//             //$(this).css("border", "none");
//             if(idData == "sumatoria" || idData == "integral" || idData == "multiplicatoria")
//                  $(this).css("display", "flex");
//             else
//                  $(this).css("display", "block");
            
//         }
        
//         if(idData == "var"){
//             //elementDrop.css("padding", "0 6px");
//             elementDrop.css("border", "0px");
//             var stringvar = "<mn>" + elementDrop.data("content") + "</mn>";
//             addvar(elementDrop.parent().data("id"), objson, stringvar);
//         }
//         else if(idData == "cons"){
//             //elementDrop.css("padding", "0 0 0 6px");
//             elementDrop.css("border", "0px");
//             var stringvar = "<mi>" + elementDrop.data("content") + "</mi>";
//             addvar(elementDrop.parent().data("id"), objson, stringvar);
                        
//         }
//        else if(idData == "llaves" || idData == "parentesis" || idData == "corchetes"|| idData == "factorial"){
//             //elementDrop.css("padding", "0");
//             elementDrop.css("border", "0px");
            
//             elementDrop.attr('data-id', $(this).data("id"));
//             elementDrop.find("code:nth-child(1)").attr('data-id', ++id);
            
            
//             var data = [];
//             var item = {};
            
//             item["id"] = elementDrop.find("code:nth-child(1)").data("id");
//             if (idData == "llaves")
//                 item["etiqueta"] = "<mtext>{</mtext>";
//             else  if (idData == "parentesis" || idData == "factorial")
//                 item["etiqueta"] = "<mtext>(</mtext>";
//             else  if(idData == "corchetes")
//                 item["etiqueta"] = "<mtext>[</mtext>";
//            else if(idData == "factorial")
//                 item["etiqueta"] = "<mtext>(</mtext>";
                
            
//             item["children"] = [];
//             data.push(item);
            
//             var nodo = addNode(elementDrop.parent().data("id"), objson, data);
            
//             makeJsonGroup(elementDrop);
//             var elementSpa = elementDrop.find(".spa");
//             elementSpa.addClass("drop2");
//             elementSpa.droppable(funcDroppable);
            
            
//         }else if(idData == "sumatoria" || idData == "integral" || idData == "multiplicatoria"){
//             //elementDrop.css("padding", "0");
//             elementDrop.css("border", "0px");
//             elementDrop.css("display", "flex !important");
//             elementDrop.attr('data-id', ++id);
//             elementDrop.find("div:nth-child(3)").find("div:nth-child(1)").attr('data-id', ++id);
//             elementDrop.find("div:nth-child(3)").find("div:nth-child(2)").attr('data-id', ++id);
//             elementDrop.find("code").attr('data-id', ++id);

//             //Funcion para general el JSON
//             makeJsonSummation(elementDrop,true);

//             var elementSpa = elementDrop.find(".spa");
//             elementSpa.addClass("drop2");
//             elementSpa.droppable(funcDroppable);
        
//         }
//        else if(idData == "expo" || idData == "expo-base") {
//             elementDrop.css("border", "0px");
//             elementDrop.css("display", "flex !important");
            
//             elementDrop.attr('data-id', ++id);
//             elementDrop.find("code:nth-child(1)").attr('data-id', ++id);
//             elementDrop.find("code:nth-child(2)").attr('data-id', ++id);

//             //Funcion para general el JSON
//             makeJsonExpo(idData, elementDrop,true);

//             var elementSpa = elementDrop.find(".spa");
//             elementSpa.addClass("drop2");
//             elementSpa.droppable(funcDroppable);
//             }
       
//        else if(idData == "trig") {
//             elementDrop.css("padding", "0");
//             elementDrop.css("border", "0px");

//             elementDrop.attr('data-id', $(this).data("id"));
//             elementDrop.find("code:nth-child(1)").attr('data-id', ++id);
//             //Funcion para general el JSON
//             makeJsonOneParameter(idData, elementDrop, true);

//             var elementSpa = elementDrop.find(".spa");
//             elementSpa.addClass("drop2");
//             elementSpa.droppable(funcDroppable);

//         } 
//        else if(idData == "log") {
//             elementDrop.css("border", "0px");
//             elementDrop.css("display", "flex !important");
            
//             elementDrop.attr('data-id', ++id);
//             elementDrop.find("code:nth-child(1)").attr('data-id', ++id);
//             elementDrop.find("code:nth-child(2)").attr('data-id', ++id);

//             //Funcion para general el JSON
//             makeJsonLog(idData, elementDrop,true);

//             var elementSpa = elementDrop.find(".spa");
//             elementSpa.addClass("drop2");
//             elementSpa.droppable(funcDroppable);
//             }
       
//        else if(idData == "combinatoria") {
//             elementDrop.css("border", "0px");
//             elementDrop.css("display", "flex !important");
            
//             elementDrop.attr('data-id', ++id);
//             elementDrop.find("div:nth-child(2)").find("div:nth-child(1)").attr('data-id', ++id);
//             elementDrop.find("div:nth-child(2)").find("div:nth-child(2)").attr('data-id', ++id);

//             //Funcion para general el JSON
//             makeJsonCombi(idData, elementDrop,true);

//             var elementSpa = elementDrop.find(".spa");
//             elementSpa.addClass("drop2");
//             elementSpa.droppable(funcDroppable);
//             }
       
//        else if(idData == "funcionf") {
//            banderafuncionf = true;
//             elementDrop.css("border", "0px");
//             elementDrop.css("display", "flex !important");
            
//             elementDrop.attr('data-id', ++id);
//             elementDrop.find("code:nth-child(1)").attr('data-id', ++id);
//             elementDrop.find("code:nth-child(2)").attr('data-id', ++id);

//             //Funcion para general el JSON
//             makeJsonFuncionf(idData, elementDrop,true);

//             var elementSpa = elementDrop.find(".spa");
//             elementSpa.addClass("drop2");
//             elementSpa.droppable(funcDroppable);
//             }
       
//        else if(idData == "division") {
//             elementDrop.css("border", "0px");
//             elementDrop.css("display", "flex !important");
            
//             elementDrop.attr('data-id', ++id);
//             elementDrop.find("div:nth-child(2)").find("div:nth-child(1)").attr('data-id', ++id);
//             elementDrop.find("div:nth-child(2)").find("div:nth-child(2)").attr('data-id', ++id);

//             //Funcion para general el JSON
//             makeJsonDivsion(idData, elementDrop,true);

//             var elementSpa = elementDrop.find(".spa");
//             elementSpa.addClass("drop2");
//             elementSpa.droppable(funcDroppable);
//             }
       
//        else if(idData == "raiz-n") {


//             elementDrop.css("padding", "0");
//             elementDrop.css("border", "0px");

//             elementDrop.attr('data-id', $(this).data("id"));
//             elementDrop.find("code:nth-child(1)").attr('data-id', ++id);
//             elementDrop.find("code:nth-child(3)").attr('data-id', ++id);

//             //Funcion para general el JSON
//             makeJsonNRaiz(idData, elementDrop, true);

//             var elementSpa = elementDrop.find(".spa");
//             elementSpa.addClass("drop2");
//             elementSpa.droppable(funcDroppable);

//         }
//         else{
//             //elementDrop.css("padding", "0");
//             elementDrop.css("border", "0px");
            
//             elementDrop.attr('data-id', $(this).data("id"));
//             elementDrop.find("code:nth-child(1)").attr('data-id', ++id);
//             elementDrop.find("code:nth-child(2)").attr('data-id', ++id);
            
            
//             //Funcion para general el JSON
//             makeJsonOther(idData, elementDrop, true);

//             var elementSpa = elementDrop.find(".spa");
//             elementSpa.addClass("drop2");
//             elementSpa.droppable(funcDroppable);
            
//         }
//         mathml = "";
//         stringmathml(objson);
//         UpdateMath("<math>" + mathml + "</math>");
//         console.log(JSON.stringify(objson));
//         console.log(mathml);
        
//     }
// };

// function makeJsonOther(idData, element, nodo){
//     var item = {};
//     var data = [];
    
//     item["id"] = element.find("code:nth-child(1)").data("id");
//     item["etiqueta"] = "";
//     item["children"] = [];
    
//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);
    
//     item = {};
//     item["id"] = "operador";
    
//     if (idData == "suma") {
//         item["etiqueta"] = "<mo>+<\/mo>";
//     } else if (idData == "resta") {
//         item["etiqueta"] = "<mo>-<\/mo>";
//     } else if (idData == "mult") {
//         item["etiqueta"] = "<mo>*<\/mo>";
//     } else 
//         item["etiqueta"] = "<mo>=<\/mo>";
    
//     item["children"] = [];
    
//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);
    
//     item = {};
//     item["id"] = element.find("code:nth-child(2)").data("id");
//     item["etiqueta"] = "";
//     item["children"] = [];
    
//     if(nodo){
//         data.push(item);
//         var isNodo = addNode(element.parent().data("id"), objson, data);
//     }
//     else
//         objson.children.push(item);
    
// }

// function makeJsonRaiz(idData, element, nodo) {
//     var item = {};
//     var data = [];
    

//     item["id"] = idData;
//     item["etiqueta"] =  "<msqrt> " ;
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

//     item = {};
//     item["id"] = element.find("code:nth-child(1)").data("id");
//     item["etiqueta"] = "";
//     item["children"] = [];

//     if(nodo){
//         data.push(item);
//         var isNodo = addNode(element.parent().data("id"), objson, data);
//     }
//     else
//         objson.children.push(item);

// }

// function makeJsonNRaiz(idData, element, nodo) {
//     var item = {};
//     var data = [];


//     item["id"] = idData;
//     item["etiqueta"] =  "<mroot> " ;
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "<mrow>";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

//     item = {};
//     item["id"] = element.find("code:nth-child(3)").data("id");
//     item["etiqueta"] = "";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "</mrow>";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

//     item = {};
//     item["id"] = element.find("code:nth-child(1)").data("id");
//     item["etiqueta"] = "";
//     item["children"] = [];

//     if(nodo){
//         data.push(item);
//         //alert(data);
//         //console.log(JSON.stringify(objson));
//         //console.log("Antes de ");
//         var isNodo = addNode(element.parent().data("id"), objson, data);
//     }
//     else
//         objson.children.push(item);

// }

// function makeJsonCombi(idData, element, nodo){
//     var item = {};
//     var data = [];
    
//     item["id"] = idData;
//     item["etiqueta"] =  "<mo>(</mo> <mfrac linethickness='0em'>";
    
    
//     item["children"] = [];
    
//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);
    
//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "<mrow>";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);
    
//     item = {};
//     item["id"] = element.find("div:nth-child(2)").find("div:nth-child(1)").data("id");
//     item["etiqueta"] = "";
//     item["children"] = [];
    
//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);
    
//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "</mrow>";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "<mrow>";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

    
    
//     item = {};
//     item["id"] = element.find("div:nth-child(2)").find("div:nth-child(2)").data("id");
//     item["etiqueta"] = "";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

    
//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "</mrow>";
//     item["children"] = [];

    
    
//     if(nodo){
//         data.push(item);
//         var isNodo = addNode(element.parent().data("id"), objson, data);
//     }
//     else
//         objson.children.push(item);
    
// }

// function makeJsonFuncionf(idData, element, nodo){
//     var item = {};
//     var data = [];
    
//     item["id"] = idData;
//     item["etiqueta"] =  "<mi>f</mi><mtext>(</mtext>";
    
    
//     item["children"] = [];
    
//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);
    
//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "<mrow>";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);
    
//     item = {};
//     item["id"] = element.find("code:nth-child(1)").data("id");
//     item["etiqueta"] = "";
//     item["children"] = [];
    
//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);
    
//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "</mrow><mtext>)</mtext><mo>=<\/mo>";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "<mrow>";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

    
    
//     item = {};
//     item["id"] = element.find("code:nth-child(2)").data("id");
//     item["etiqueta"] = "";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

    
//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "</mrow>";
//     item["children"] = [];

    
    
//     if(nodo){
//         data.push(item);
//         var isNodo = addNode(element.parent().data("id"), objson, data);
//     }
//     else
//         objson.children.push(item);
    
// }

// function makeJsonDivsion(idData, element, nodo){
//     var item = {};
//     var data = [];
    
//     item["id"] = idData;
//     item["etiqueta"] =  "<mo>(</mo> <mfrac linethickness='1px'>";
//     item["children"] = [];
    
//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);
    
//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "<mrow>";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);
    
//     item = {};
//     item["id"] = element.find("div:nth-child(2)").find("div:nth-child(1)").data("id");
//     item["etiqueta"] = "";
//     item["children"] = [];
    
//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);
    
//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "</mrow>";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "<mrow>";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

    
    
//     item = {};
//     item["id"] = element.find("div:nth-child(2)").find("div:nth-child(2)").data("id");
//     item["etiqueta"] = "";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

    
//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "</mrow>";
//     item["children"] = [];

    
    
//     if(nodo){
//         data.push(item);
//         var isNodo = addNode(element.parent().data("id"), objson, data);
//     }
//     else
//         objson.children.push(item);
    
// }

// function makeJsonExpo(idData, element, nodo) {
//     var item = {};
//     var data = [];


//     item["id"] = idData;
//     if(idData == "expo")
//         item["etiqueta"] =  "<msup>";
//     else
//         item["etiqueta"] =  "<msub>";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "<mrow>";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

//     item = {};
//     item["id"] = element.find("code:nth-child(1)").data("id");
//     item["etiqueta"] = "";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "</mrow>";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

//     //---------------- mrow2
//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "<mrow>";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

//     item = {};
//     item["id"] = element.find("code:nth-child(2)").data("id");
//     item["etiqueta"] = "";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "</mrow>";
//     item["children"] = [];

//     if(nodo){
//         data.push(item);
//         var isNodo = addNode(element.parent().data("id"), objson, data);
//     }
//     else
//         objson.children.push(item);
    
// }

// function makeJsonLog(idData, element, nodo){
//     var item = {};
//     var data = [];
    

//     item["id"] = "log";
//     item["etiqueta"] =  "<mi>" + element.data("content") + "</mi> <msub>";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "<mrow>";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

//     item = {};
//     item["id"] = element.find("code:nth-child(1)").data("id");
//     item["etiqueta"] = "";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "</mrow>";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

//     //---------------- mrow2
//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "<mrow>";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

//     item = {};
//     item["id"] = element.find("code:nth-child(2)").data("id");
//     item["etiqueta"] = "";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

//     item = {};
//     item["id"] = "row";
//     item["etiqueta"] = "</mrow>";
//     item["children"] = [];

//     if(nodo){
//         data.push(item);
//         var isNodo = addNode(element.parent().data("id"), objson, data);
//     }
//     else
//         objson.children.push(item);

// }

// function makeJsonOneParameter(idData, element, nodo) {
//     var item = {};
//     var data = [];
    

//     item["id"] = "trig";
//     item["etiqueta"] =  "<mi>" + element.data("content") + "</mi>";
//     item["children"] = [];

//     if(nodo)
//         data.push(item);
//     else
//         objson.children.push(item);

//     item = {};
//     item["id"] = element.find("code:nth-child(1)").data("id");
//     item["etiqueta"] = "";
//     item["children"] = [];

//     if(nodo){
//         data.push(item);
//         var isNodo = addNode(element.parent().data("id"), objson, data);
//     }
//     else
//         objson.children.push(item);

// }

// function makeJsonGroup(element){
//     var item = {};
//     item["id"] = element.find("code:nth-child(1)").data("id");
//     item["etiqueta"] = "";
//     item["children"] = [];
//     objson.children.push(item);
// }

// function makeJsonSummation(element,nodo){

//     var item = {};
//     var item2 = {};
//     var data = [];
//     item["id"] = element.data("id");
//     var idData = element.data("id");
//     if(idData == "sumatoria" ){
//         item["etiqueta"] = "<munderover><mo>&sum;</mo>";
//     }else if(idData == "integral"){
//         item["etiqueta"] = "<munderover><mo>&int;</mo>";
//     }else if(idData == "multiplicatoria"){
//         item["etiqueta"] = "<munderover><mo>&#928;</mo>";
//     }

//     item["children"] = [];


//     item2["id"] = element.find("div:nth-child(3)").find("div:nth-child(2)").data("id");
//     item2["etiqueta"] = "<mtext></mtext>";
//     item2["children"] = [];

//     item.children.push(item2);

//     item2 = {};
//     item2["id"] = element.find("div:nth-child(3)").find("div:nth-child(1)").data("id");
//     item2["etiqueta"] = "<mtext></mtext>";
//     item2["children"] = [];

//     item.children.push(item2);


//     item2 = {};
//     item2["id"] = element.find("code").data("id");
//     item2["etiqueta"] = "";
//     item2["children"] = [];

//     if(nodo) {
//         data.push(item);
//         data.push(item2);
//         var isNodo = addNode(element.parent().data("id"), objson, data);
//     }else {
//         objson.children.push(item);
//         objson.children.push(item2);
//     }

    
// }

// function findNode(id, currentNode) {
//     if (id == currentNode.id) {
//         return currentNode;
//     } else {
//         var result;
//         for (var index in currentNode.children) {
//             var node = currentNode.children[index];

//             if (node.id == id) return node;
//             findNode(id, node);
//         }
//     }
// }

// //Agrega un nuevo elemento al json, sus parámetros el id del padre donde debe ser agrego, el json o ellugar donde se encuentre el json(debido a que es una función recursiva) y el array que contiene los datos que deben ser agregados
// function addNode(id, currentNode, data) {
//     if (id == currentNode.id) {
//         currentNode.children = data;
//         //currentNode.etiqueta = "";
//         return currentNode;
//     } else {
//         var result;
//         for (var index in currentNode.children) {
//             var node = currentNode.children[index];

//             if (node.id == id) {
//                 node.children = data;
//                 //node.etiqueta = "";
//                 return node;
//             }
//             addNode(id, node, data);
//         }
//     }
// }
// function addnewinput(object,type){

//     var elementDrop = $("#base").clone();
//     var idData = elementDrop.data("id");
//     elementDrop.addClass("card2");
//     elementDrop.removeClass("card");

//     elementDrop.draggable({
//         appendTo: "body",
//         cursor: "move",
//         revert: "invalid",
//         greedy: true
//     });

//     elementDrop.attr('data-content',object.value);
//     elementDrop.attr('data-id',type);

//     $(object).parent().append(elementDrop);
//     $(object).parent().css("display", "block");
//     elementDrop.children().html(object.value);
//     if(type == "var"){
//         elementDrop.css("border", "0px");
//         var stringvar = "<mn>" + object.value + "</mn>";
//         var id=$(object).parent().data("id");
//         $(object).remove();
//         addvar( id, objson, stringvar);
//     }
//     else if(type== "cons"){
//         console.log("Entro al segundo if");
//         elementDrop.css("border", "0px");
//         var stringvar = "<mi>" + object.value + "</mi>";
//         var id=$(object).parent().data("id");
//         $(object).remove();
//         addvar( id, objson, stringvar);
//     }
//     mathml = "";
//     stringmathml(objson);
//     UpdateMath("<math>" + mathml + "</math>");
//     console.log(JSON.stringify(objson));
//     console.log(mathml);
// }

// function removeNode(id, currentNode, data) {

//     if (id == currentNode.id) {
//         currentNode.children = data;
//         //currentNode.etiqueta = "";
//         return currentNode;
//     } else {
//         var result;
//         for (var index in currentNode.children) {
//             var node = currentNode.children[index];

//             if (node.id == id) {
//                 node.children = data;
//                 //node.etiqueta = "";
//                 return node;
//             }
//             addNode(id, node, data);
//         }
//     }
// }

// function addvar(id, currentNode, datavar) {

//     if (id == currentNode.id) {
//         //currentNode.children=data;
//         currentNode.etiqueta = datavar;
//         return currentNode;
//     } else {
//         var result;
//         for (var index in currentNode.children) {
//             var node = currentNode.children[index];

//             if (node.id == id) {
//                 //node.children=data;
//                 node.etiqueta = datavar;
//                 return node;
//             }
//             addvar(id, node, datavar);
//         }
//     }
// }

// //Lee todo el json, obteniendo solo las etiquetas que necesita para obtener sólo codigo mathml leíble por el previsualizador.
// function stringmathml(currentNode) {
//     var result;
//     var bandera=false;
//     mathml = mathml + currentNode.etiqueta;
//     var banderaraiz=false;
//     var banderanraiz=false;
//     var banderanExpoL=false;
//     var banderanExpoU=false;
//     var banderanCombi=false;
//     if (currentNode.children.length > 0) {
        
//         for (var index in currentNode.children) {


//             var node = currentNode.children[index];
//             if(node.etiqueta.indexOf("<msqrt>") >= 0){
//                 banderaraiz=true;
//             }
//             if(node.etiqueta.indexOf("<mroot>") >= 0){
//                 banderanraiz=true;
//             }
//             if(node.etiqueta.indexOf("<msup>") >= 0){
//                 banderanExpoU=true;
//             }
            
//             if(node.etiqueta.indexOf("<msub>") >= 0){
//                 banderanExpoL=true;
//             }
//             if(node.etiqueta.indexOf("linethickness") >= 0){
//                 banderanCombi=true;
//                 banderanCombiG=true;
//             }
            
//             //mathml = mathml + node.etiqueta;
//             stringmathml(node);
//         }
//         if(banderaraiz){
//             mathml = mathml + "</msqrt>";
//         }
//         if(banderanraiz){
//             mathml = mathml + "</mroot>";
//         }
//         if(banderanExpoU){
//             mathml = mathml + "</msup>";
//         }
//         if(banderanExpoL){
//             mathml = mathml + "</msub>";
//         }
        
//         if(banderanCombi){
//             mathml = mathml + "</mfrac><mo>)</mo>";
//         }
//         mathml = mathml + "";

//     }
    
//     if (currentNode.etiqueta.indexOf("{") >= 0){
//         mathml = mathml + "<mtext>}</mtext>";
//     }
//     else if (currentNode.etiqueta.indexOf("(") >= 0 && !banderanCombiG && !banderafuncionf){
//         if(banderafactorial)
//             mathml = mathml + "<mtext>)!</mtext>";
//         else
//             mathml = mathml + "<mtext>)</mtext>";
//     }else if (currentNode.etiqueta.indexOf("[") >= 0){
//         mathml = mathml + "<mtext>]</mtext>";
//     }else if (currentNode.etiqueta.indexOf("<munderover>") >= 0){
//         mathml = mathml + "</munderover>";
//     }/*else if (currentNode.etiqueta.indexOf("<msup>") >= 0 && banderanExpo == false){
//         mathml = mathml + "</mrow></msup>";
//     }*/

// }



// (function () {
//     console.log(mathml);
//     var QUEUE = MathJax.Hub.queue;
//     var math = null;
//     QUEUE.Push(function () {
//         math = MathJax.Hub.getAllJax("previsualizar")[0];
//     });
//     window.UpdateMath = function (MathML) {
//         QUEUE.Push(["Text", math, MathML]);
//     }
// })();

